# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # store the version denoted by the POM onto the env
      - run: mkdir -p target
      - run: mvn dependency:go-offline
      - run: mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -Ev '(^\[|Download)' > target/version.txt

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run: mvn package
      - persist_to_workspace:
          root: target
          paths:
            - demo-0.0.1-SNAPSHOT.jar
            - version.txt

  deploy:
    docker:
      - image: circleci/python:2.7
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Installing deployment dependencies
          working_directory: ~/repo
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python-pip python-dev build-essential
            sudo pip install awsebcli --upgrade
      - run:
          name: Create AWS credentials manually
          command: |
            mkdir ~/.aws
            touch ~/.aws/config
            chmod 600 ~/.aws/config
            echo "[profile eb-cli]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config

      - run:
          name: Create AWS eb config manually
          command: |
            mkdir -p ~/repo/.elasticbeanstalk
            touch ~/repo/.elasticbeanstalk/config.yml
            chmod 600 ~/repo/.elasticbeanstalk/config.yml
            echo "branch-defaults:" > ~/repo/.elasticbeanstalk/config.yml
            echo "  default:" >> ~/repo/.elasticbeanstalk/config.yml
            echo "    environment: app1-dev" >> ~/repo/.elasticbeanstalk/config.yml
            echo "deploy:" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  artifact: target/demo-0.0.1-SNAPSHOT.jar" >> ~/repo/.elasticbeanstalk/config.yml
            echo "global:" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  application_name: app1" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  branch: null" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  default_ec2_keyname: null" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  default_platform: Java 8" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  default_region: us-west-1" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  profile: eb-cli" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  sc: null" >> ~/repo/.elasticbeanstalk/config.yml
            echo "  workspace_type: Application" >> ~/repo/.elasticbeanstalk/config.yml

      - run:
          name: Deploy to EB
          command: |
            eb use app1-dev --profile eb-cli --region us-west-1
            eb deploy -v --staged --profile eb-cli

workflows:
  version: 2
  wf1:
    jobs:
      - test
      - deploy:
          requires:
            - test